import { ErrorValidationMessage } from '@/components/Forms/ErrorValidationMessage/ErrorValidationMessage';
import CustomSelect from '@/components/Forms/Select/Select';
import TextInput from '@/components/Forms/TextInput/TextInput';
import { RFIDDictionary } from '@/types/api/Responses/RFIDDictionary.interface';
import { RFIDType } from '@/types/view/AddSpecimanModal.type';
import classNames from 'classnames';
import { Button, Label, Radio } from 'flowbite-react';
import _ from 'lodash';
import useTranslation from 'next-translate/useTranslation';
import { useFormContext } from 'react-hook-form';
import { EditRFIDFormValues } from './AddRFIDModal';
import useAddRFIDCustomHook from './useAddRFIDCustomHook';
import { handleInputToUpperCase } from '@/utils/toUpperCase';

interface AddRFIDFormProps {
  isOpen: boolean;
  dictionaryRFID: RFIDDictionary;
  readersList: any[];
}

const AddRFIDForm: React.FC<AddRFIDFormProps> = ({ isOpen, dictionaryRFID, readersList }) => {
  const { t } = useTranslation('specimens');
  const {
    control,
    register,
    formState: { errors },
    watch,
    setValue,
    trigger,
    clearErrors,
  } = useFormContext<EditRFIDFormValues>();
  const { handleReaderRFID, isReaderRFIDLoading, isZeroTagsLoading } = useAddRFIDCustomHook(isOpen);

  return (
    <div className="flex max-h-[100vh] flex-col gap-5 ">
      <div className="flex flex-col gap-3">
        {/* RFID LOGIC */}
        <div className={classNames('grid gap-4 md:grid-cols-3')}>
          <div className="flex flex-col gap-1">
            <Label htmlFor="rfidType-auto-devices" className="flex items-center gap-2 pl-1">
              <Radio
                id="rfidType-auto-devices"
                checked={watch('rfidType') === RFIDType.AutoGenerated}
                onChange={() => {
                  setValue('rfidType', RFIDType.AutoGenerated);
                  setValue('rfId', '');
                  setValue('rfidReader', '');
                  setValue('rfidReaderId', '');
                  setValue('rfidItemType', '');
                  trigger(['rfidType', 'rfidReader', 'rfidReaderId', 'rfId']);
                }}
              />
              {t('modal.autoGenerated')}
            </Label>
            <Label htmlFor="rfidType-manual-devices" className="flex items-center gap-2 pl-1">
              <Radio
                id="rfidType-manual-devices"
                checked={watch('rfidType') === RFIDType.Manual}
                onChange={() => {
                  setValue('rfidType', RFIDType.Manual);
                  setValue('rfId', '');
                  setValue('rfidReader', '');
                  setValue('rfidItemType', '');
                  trigger(['rfidType', 'rfidReader', 'rfidReaderId']);
                }}
              />
              {t('modal.manual')}
            </Label>
            {readersList?.length > 0 && (
              <Label htmlFor="rfidType-reader-devices" className="flex items-center gap-2 pl-1">
                <Radio
                  id="rfidType-reader-devices"
                  checked={watch('rfidType') === RFIDType.Reader}
                  onChange={() => {
                    setValue('rfidType', RFIDType.Reader);
                    setValue('rfId', '');
                    setValue('rfidReaderId', '');
                    setValue('rfidItemType', '');
                    trigger(['rfidType']);
                    clearErrors(['rfId']);
                  }}
                />
                {t('modal.reader')}
              </Label>
            )}
            <ErrorValidationMessage touched={errors?.rfidType} message={errors?.rfidType?.message} />
          </div>
          <div className="flex flex-col">
            <Label>
              {t('table.RFID')}
              <div className={classNames({ 'opacity-40': watch('rfidType') != RFIDType.Manual })}>
                <TextInput
                  required
                  type="text"
                  placeholder={`${t('table.RFID')}`}
                  register={register('rfId')}
                  disabled={watch('rfidType') != RFIDType.Manual}
                  onInput={handleInputToUpperCase}
                  error={errors?.rfId}
                />
              </div>
            </Label>
            <ErrorValidationMessage touched={errors?.rfId} message={errors?.rfId?.message} />
            {!_.isEmpty(dictionaryRFID) && watch('rfidItemType') && (
              <ErrorValidationMessage
                touched={!!watch('rfidItemType')}
                message={
                  !!dictionaryRFID[watch('rfidItemType')]
                    ? `${dictionaryRFID[watch('rfidItemType')]} ${t('scannedType')}`
                    : 'Item was scanned'
                }
                style={{
                  label: {
                    color: '#BCF0DA',
                  },
                }}
              />
            )}
          </div>
          {readersList?.length > 0 && (
            <div className="flex flex-col">
              <Label>
                {t('modal.reader')}
                <CustomSelect
                  control={control}
                  name={'rfidReader'}
                  options={readersList || []}
                  placeholder={`${t('modal.reader')}`}
                  value={watch('rfidReader')}
                  disabled={watch('rfidType') != RFIDType.Reader}
                  onChange={val => {
                    if (val?.value) {
                      //reset rfid
                      clearErrors(`rfidReaderId`);
                      trigger('rfId');
                      setValue('rfId', '');
                      setValue('rfidItemType', '');
                      handleReaderRFID(val?.value || '');
                      trigger('rfId');
                    }
                  }}
                />
              </Label>
              <ErrorValidationMessage
                touched={errors?.rfidReader || (errors?.rfidReaderId && errors?.rfidReaderId.type !== 'custom')}
                message={errors?.rfidReader?.message || errors?.rfidReaderId?.message}
              />
            </div>
          )}
        </div>

        <div className="flex items-center justify-end gap-2">
          {errors?.rfidReaderId && errors?.rfidReaderId.type === 'custom' && (
            <ErrorValidationMessage
              touched={errors?.rfidReaderId}
              message={errors?.rfidReaderId?.message}
              style={{
                label: {
                  fontSize: '14px',
                },
              }}
            />
          )}
          {
            // can rescan if there is error or if RFID was created by scanner
          }
          {((errors?.rfidReaderId && errors?.rfidReaderId.type === 'custom') ||
            (!!watch('rfidReader') && watch('rfidType') === RFIDType.Reader)) && (
            <Button
              gradientDuoTone="primary"
              onClick={() => {
                if (watch('rfidReader')) {
                  clearErrors('rfId');
                  clearErrors(`rfidReaderId`);
                  //reset rfid
                  setValue('rfId', '');
                  setValue('rfidItemType', '');
                  handleReaderRFID(watch('rfidReader') || '');
                }
              }}
              disabled={isReaderRFIDLoading || isZeroTagsLoading}>
              {'Rescan'}
            </Button>
          )}
        </div>
      </div>
    </div>
  );
};

export default AddRFIDForm;
